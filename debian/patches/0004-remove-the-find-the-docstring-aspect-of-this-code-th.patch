From be5a895c923c6120824a17d32fac3be05893c24a Mon Sep 17 00:00:00 2001
From: Mike Bayer <mike_mp@zzzcomputing.com>
Date: Fri, 16 Feb 2018 16:40:33 -0500
Subject: =?UTF-8?q?-=20remove=20the=20"find=20the=20docstring"=20aspect=20?=
 =?UTF-8?q?of=20this=20code=20that=0Adoesn't=20seem=20to=20be=20doing=20an?=
 =?UTF-8?q?ything=20and=20is=20breaking=20on=20old=0APythons,=20new=20sphi?=
 =?UTF-8?q?nxes,=20too=20much.?=

---
 zzzeeksphinx/viewsource.py | 67 +++++++-------------------------------
 1 file changed, 11 insertions(+), 56 deletions(-)

diff --git a/zzzeeksphinx/viewsource.py b/zzzeeksphinx/viewsource.py
index 8b20c43..9fc6e2c 100644
--- a/zzzeeksphinx/viewsource.py
+++ b/zzzeeksphinx/viewsource.py
@@ -5,9 +5,7 @@ import imp
 import re
 from docutils.parsers.rst import Directive
 import os
-from docutils.statemachine import StringList
 from sphinx.environment import NoUri
-import tokenize as token
 import warnings
 from . import util
 
@@ -99,20 +97,6 @@ def _view_source_node(env, text, state):
     else:
         code = analyzer.code
 
-    if state is not None:
-        docstring = _find_mod_docstring(pathname)
-        if docstring:
-            # get rid of "foo.py" at the top
-            docstring = re.sub(r"^[a-zA-Z_0-9]+\.py", "", docstring)
-
-            # strip
-            docstring = docstring.strip()
-
-            # yank only first paragraph
-            docstring = docstring.split("\n\n")[0].strip()
-    else:
-        docstring = None
-
     pagename = '_modules/' + modname.replace('.', '/')
     try:
         refuri = urito(env.docname, pagename)
@@ -127,52 +111,23 @@ def _view_source_node(env, text, state):
         entry = code, analyzer.tags, {}
     env._viewcode_modules[modname] = entry
 
-    if docstring:
-        # embed the ref with the doc text so that it isn't
-        # a separate paragraph
-        if refuri:
-            docstring = "`%s <%s>`_ - %s" % (text, refuri, docstring)
-        else:
-            docstring = "``%s`` - %s" % (text, docstring)
-        para = nodes.paragraph('', '')
-        state.nested_parse(StringList([docstring]), 0, para)
-        return_node = para
+    if refuri:
+        refnode = nodes.reference(
+            '', '',
+            nodes.Text(text, text),
+            refuri=urito(env.docname, pagename)
+        )
     else:
-        if refuri:
-            refnode = nodes.reference(
-                '', '',
-                nodes.Text(text, text),
-                refuri=urito(env.docname, pagename)
-            )
-        else:
-            refnode = nodes.Text(text, text)
+        refnode = nodes.Text(text, text)
 
-        if state:
-            return_node = nodes.paragraph('', '', refnode)
-        else:
-            return_node = refnode
+    if state:
+        return_node = nodes.paragraph('', '', refnode)
+    else:
+        return_node = refnode
 
     return return_node
 
 
-def _find_mod_docstring(pathname):
-    """attempt to locate the module-level docstring.
-
-    Note that sphinx autodoc just uses ``__doc__``.  But we don't want
-    to import the module, so we need to parse for it.
-
-    """
-    fhandle = open(pathname, 'rb')
-    for type_, parsed_line, start_pos, end_pos, raw_line in \
-            token.tokenize(fhandle.readline):
-        if type_ == token.COMMENT:
-            continue
-        elif type_ == token.STRING:
-            return eval(parsed_line)
-        else:
-            return None
-
-
 def _parse_content(content):
     d = {}
     d['text'] = []
